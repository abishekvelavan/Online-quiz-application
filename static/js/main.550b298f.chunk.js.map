{"version":3,"sources":["components/Questionnaire.jsx","App.js","index.js"],"names":["Questionnaire","showAnswers","handleAnswer","handleNextQuestion","data","question","correct_answer","answers","className","dangerouslySetInnerHTML","__html","map","answer","idx","textColor","onClick","App","useState","questions","setQuestions","currentIndex","setCurrentIndex","score","setScore","setShowAnswers","useEffect","fetch","then","res","json","results","incorrect_answers","sort","Math","random","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAmDeA,EA/CO,SAAC,GAKhB,IAJHC,EAIE,EAJFA,YACAC,EAGE,EAHFA,aACAC,EAEE,EAFFA,mBAEE,IADFC,KAAQC,EACN,EADMA,SAAUC,EAChB,EADgBA,eAAgBC,EAChC,EADgCA,QAIlC,OACI,sBAAKC,UAAU,gBAAf,UAEI,qBAAKA,UAAU,kDAAf,SACI,oBACIA,UAAU,WACVC,wBAAyB,CAAEC,OAAQL,OAG3C,qBAAKG,UAAU,8BAAf,SACKD,EAAQI,KAAI,SAACC,EAAQC,GAClB,IAAMC,EAAYb,EACdW,IAAWN,EACP,iBAAmB,eAAiB,aAI5C,OACI,wBAEIE,UAAS,gCAA2BM,EAA3B,qCACTC,QAAS,kBAAMb,EAAaU,IAASA,OAAQA,EAC7CH,wBAAyB,CAAEC,OAAQE,IAH9BC,QAOpBZ,GACG,wBACIc,QAASZ,EACTK,UAAS,0EAFb,+BC2CDQ,MAzEf,WACE,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,mBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA0BJ,mBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAsCN,oBAAS,GAA/C,mBAAOhB,EAAP,KAAoBuB,EAApB,KA6CA,OA3CAC,qBAAU,WACRC,MATY,kEAUTC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAvB,GACJ,IAAMc,EAAYd,EAAK0B,QAAQnB,KAAI,SAACN,GAAD,mBAAC,eAE/BA,GAF8B,IAGjCE,QAAS,CACPF,EAASC,gBADF,mBAEJD,EAAS0B,oBACZC,MAAK,kBAAMC,KAAKC,SAAW,WAI/Bf,EAAaD,QAGhB,IA0BKA,EAAUiB,OAAS,EACzB,qBAAK3B,UAAU,YAAf,SACGY,GAAgBF,EAAUiB,OACzB,qBAAI3B,UAAU,gCAAd,uCAC6Bc,KAI7B,cAAC,EAAD,CACElB,KAAMc,EAAUE,GAChBnB,YAAaA,EACbC,aAnCa,SAACU,GAGfX,GACCW,IAAWM,EAAUE,GAAcd,gBACrCiB,EAASD,EAAQ,GAKrBE,GAAe,IA0BTrB,mBAlBmB,WACzBqB,GAAe,GAEfH,EAAgBD,EAAe,QAmB/B,sDCrEJgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.550b298f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Questionnaire = ({\r\n    showAnswers,\r\n    handleAnswer,\r\n    handleNextQuestion,\r\n    data: { question, correct_answer, answers }\r\n}) => {\r\n\r\n\r\n    return (\r\n        <div className='flex flex-col'>\r\n            {/* prints the questions*/}\r\n            <div className=\"bg-purple-700 text-white p-10 rounded shadow-md\">\r\n                <h2\r\n                    className=\"text-2xl\"\r\n                    dangerouslySetInnerHTML={{ __html: question }}\r\n                />\r\n            </div>\r\n            <div className=\"grid grid-cols-2 gap-6 mt-6\">\r\n                {answers.map((answer, idx) => {\r\n                    const textColor = showAnswers ?\r\n                        answer === correct_answer ?\r\n                            'text-green-500' : 'text-red-500' : 'text-white'\r\n\r\n                    //const textColor = showAnswers ? 'text-white' : 'text-black';\r\n\r\n                    return (\r\n                        <button\r\n                            key={idx}\r\n                            className={`kl-auto bg-purple-700 ${textColor} p-4 font-semibold rounded shadow`}\r\n                            onClick={() => handleAnswer(answer)} answer={answer}\r\n                            dangerouslySetInnerHTML={{ __html: answer }} />\r\n                    )\r\n                })}\r\n            </div>\r\n            {showAnswers && (\r\n                <button\r\n                    onClick={handleNextQuestion}\r\n                    className={`ml-auto mt-6  bg-white text-purple-800 p-4 font-semibold rounded shadow`}>\r\n                    Next Question\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default Questionnaire;\r\n","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n//import { Questionnaire } from './components';\nimport Questionnaire from './components/Questionnaire';\n\n\nconst API_URL = 'https://opentdb.com/api.php?amount=10&category=9&type=multiple';\n\nfunction App() {\n  const [questions, setQuestions] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showAnswers, setShowAnswers] = useState(false);\n\n  useEffect(() => {\n    fetch(API_URL)\n      .then(res => res.json())\n      .then(data => {\n        const questions = data.results.map((question) =>\n        ({\n          ...question,\n          answers: [\n            question.correct_answer,\n            ...question.incorrect_answers\n          ].sort(() => Math.random() - 0.5\n          ),\n        }));\n\n        setQuestions(questions);\n\n      });\n  }, []);\n\n  const handleAnswer = (answer) => {\n    //check for the answer, show the question and change the score\n    // loops through the question set\n    if (!showAnswers) {\n      if (answer === questions[currentIndex].correct_answer) {\n        setScore(score + 1)\n        //increase score\n      }\n    }\n\n    setShowAnswers(true);\n\n    //const newIndex = currentIndex + 1\n    //setCurrentIndex(newIndex)\n\n\n  };\n\n  const handleNextQuestion = () => {\n    setShowAnswers(false);\n\n    setCurrentIndex(currentIndex + 1);\n  }\n\n  return (questions.length > 0 ? (\n    <div className=\"container\">\n      {currentIndex >= questions.length ? (\n        <h1 className=\"text-3xl font-bold text-white\">\n          Game ended! Your score is {score}\n        </h1>\n\n      ) : (\n        <Questionnaire\n          data={questions[currentIndex]}\n          showAnswers={showAnswers}\n          handleAnswer={handleAnswer}\n          handleNextQuestion={handleNextQuestion} />\n      )}\n    </div>\n  ) : (\n    <h3>Loading please wait</h3>\n  ))\n}\n\n\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}